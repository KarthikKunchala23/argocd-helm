name: Deploy or Upgrade ArgoCD via Helm

on:
  push:
    branches:
      - main
    paths:
      - "values.yaml"
      - ".github/workflows/deploy-argocd.yaml"
  workflow_dispatch:
    inputs:
      cluster_name:
        description: "EKS cluster name"
        required: true
        default: "data-plat-eks-dev"
      aws_region:
        description: "AWS region"
        required: true
        default: "us-east-1"

jobs:
  deploy-argocd:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ github.event.inputs.aws_region || 'us-east-1' }}
      CLUSTER_NAME: ${{ github.event.inputs.cluster_name || 'data-plat-eks-dev' }}

    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl & Helm
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.29.0'
      - uses: azure/setup-helm@v3
        with:
          version: '3.14.0'

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION

      - name: Create namespace for ArgoCD
        run: |
          kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -

      - name: Ensure ArgoCD CRDs exist
        run: |
          echo "Ensuring ArgoCD CRDs are present..."
          kubectl apply -k "https://github.com/argoproj/argo-cd/manifests/crds?ref=v2.11.2"

      - name: Install or Upgrade ArgoCD via Helm
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update
          helm upgrade --install argocd argo/argo-cd \
            --namespace argocd \
            --version 5.51.6 \
            --values ./values.yaml

      - name: Wait for ArgoCD to become ready
        run: |
          echo "Waiting for ArgoCD pods to become ready..."
          kubectl rollout status deployment/argocd-server -n argocd --timeout=300s || true
          kubectl get pods -n argocd
          kubectl get ingress -n argocd
